Act as an expert AI Architect and Senior Python Developer. 
My goal is to build an "AI Recruiter Assistant," a conversational chatbot to pre-screen job offers 
from recruiters.

**1. Project Overview & Core Challenge**

I want to develop a chatbot that interacts with recruiters. 
The main challenge is that I cannot automate interactions directly on LinkedIn 
(due to the risk of an account ban and API complexity).

**Proposed Solution:** 
We will create a simple web application (e.g., using Gradio or Streamlit) 
where I can paste conversations or direct recruiters to interact with my AI assistant.

The project must be initially developed in a **Google Colab Notebook**. 
The timeline for a first functional prototype is **1 week (20-30 hours)**.

**2. Conversation Flow & Business Logic**

The chatbot must manage the conversation through different states. Here is the detailed logic:

* **Step 1: Intent Detection.**
    * The bot must first analyze the initial message to determine 
    if it's a concrete job offer or a generic message (e.g., "Hi, are you open to new opportunities?").
    * If it's generic, the bot should politely ask for more details about the position. 
    The conversation state is **"pending_details"**.

* **Step 2: Offer Analysis with RAG.**
    * Once a detailed job offer is available, 
    the bot must analyze and compare it against my information stored in a RAG pipeline.
    * **Data for RAG:** My CV (from the `cv.md` file) and 
    a document with my job expectations (from `job_expectations.md`, 
    detailing role types, tech stack, company culture, salary expectations, etc.).
    * The bot must calculate a **`match_score` (percentage)** between the offer and my profile.

* **Step 3: Decision Logic & State Management.**
    * If `match_score > 80%`:
        * **State:** `"passed"`
        * **Action:** The bot should respond positively, stating the offer is a great fit. 
        The goal is now to schedule a call. It must ask the recruiter for their availability, 
        preferred call duration (15, 30 min), and the call's objective (get-to-know, technical interview, etc.).
        * *Future Scope Note (do not implement now):* 
        A function to schedule the call on Google Calendar will be added later.
    * If `60% <= match_score <= 80%`:
        * **State:** `"stand-by"`
        * **Action:** The bot should send a cordial reply, 
        indicating the offer seems interesting but needs to be manually reviewed by me. 
        The conversation is put on hold for my personal analysis.
    * If `match_score < 60%`:
        * **State:** `"finished"`
        * **Action:** The bot must thank the recruiter but politely decline, 
        explaining it's not a good fit. It should briefly describe my ideal profile 
        (e.g., "I'm looking for Data Science projects using Python and cloud tech in product-focused companies...") and keep the door open for future opportunities.

**3. Technical Requirements**

* **Language:** Python.
* **Frameworks:** LangChain for orchestrating all components (LLM, RAG, prompts).
* **LLM Model:**
    * Must be an **open-source LLM**.
    * **Zero-cost:** Suggest models that can run on a 
    free Google Colab tier 
    (e.g., `Mistral-7B-Instruct`, `Llama-3-8B-Instruct`,
     or quantized versions like GGUF/GPTQ to save memory).
* **Fine-Tuning:**
    * I want to fine-tune the LLM using a low-cost technique 
    like **LoRA** to specialize its tone and conversational style.
    * I have a dataset of LinkedIn messages 
    (in the `/data` folder) that I will provide for this process.
* **Development Environment:** Google Colab Notebook.

**4. Your Task (My Request)**

1.  **Global Proposal:** 
Outline a general architecture for the project. 
How will the LLM, LangChain, RAG, and business logic connect?
2.  **Step-by-Step Development Plan:** 
Create a detailed plan to complete this project in one week. 
Break down the work into actionable tasks 
(e.g., Day 1-2: Setup, data loading, and RAG; 
Day 3-4: LoRA Fine-tuning; 
Day 5-7: State logic and Gradio frontend).
3.  **Tech Stack Suggestions:** 
Recommend a specific open-source LLM and the key Python libraries 
we will need (`transformers`, `bitsandbytes`, `peft`, `faiss-cpu`, `langchain`, `gradio`, etc.).
4.  **Colab Development:** 
Let's start coding. Guide me in creating the notebook structure, 
starting with installing dependencies, loading the documents for RAG (`@cv.md`, `@job_expectations.md`), 
and creating the vector database.